local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Treasure Quest", HidePremium = false, SaveConfig = false, ConfigFolder = "asdsahgjasdhkgjbdsa"})

-------------------------------------------------  Star Players  -------------------------------------------------
--------
------
-----
----
---
--
-------------------------------------------
local Tab1 = Window:MakeTab({
	Name = "Auto Farm",
	Icon = "rbxassetid://12836287616",
	PremiumOnly = false
})
-------------------------------------------
local Tab2 = Window:MakeTab({
	Name = "Farm WAVE",
	Icon = "rbxassetid://12836287616",
	PremiumOnly = false
})
--------------------------------------------
repeat wait() until game:IsLoaded()
local ReplicatedStorage = game.ReplicatedStorage
local Players = game.Players
local TweenService = game.TweenService
local Workspace = game.Workspace
local HttpService = game.HttpService
local Player = Players.LocalPlayer

local TweenInfoClose = TweenInfo.new(0.5, Enum.EasingStyle.Linear)
local Character = Player.Character

local HumanoidRootPart = Character.HumanoidRootPart

local Speed = 60

Tab1:AddButton({
	Name = "Speed",
	Callback = function(value)
		if Speed then
			Player.Character.Humanoid.WalkSpeed = Speed
		end
	end
})

local InfJump = false
Tab1:AddToggle({
	Name = "InfJump",
	Default = false,
	Callback = function(value)
		InfJump = value
	end
})

local function onJumpRequest()
	if InfJump then
		Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
	end
end

game:GetService("UserInputService").JumpRequest:Connect(onJumpRequest)

local AntiAFK = false
Tab1:AddToggle({
	Name = "Anti AFK",
	Default = false,
	Callback = function(value)
		AntiAFK = value
		if AntiAFK then
			wait(3)
			local VirtualUser = game:service('VirtualUser')
			game:service('Players').LocalPlayer.Idled:Connect(function()
				VirtualUser:CaptureController()
				VirtualUser:ClickButton2(Vector2.new())
			end)
		end
	end
})

--------------------------------------------------------------------------------------------------------------------------------------------------------------

local Section = Tab1:AddSection({
	Name = "----------------------------------------------------------------------------------------------------------------------------------------------"
})

local CollectMedkits = true
Tab1:AddToggle({
	Name = "Collect Medkit",
	Default = false,
	Callback = function(value)
		CollectMedkits = value
		while CollectMedkits do
			local humanoid = Player.Character:FindFirstChild("Humanoid")
			if humanoid and humanoid.Health < humanoid.MaxHealth * 0.95 then
				local Medkit = Workspace.Ignore:GetChildren() 
				for i, Medkit in ipairs(Medkit) do
					if Medkit:IsA("MeshPart") and Medkit.Name == "Medkit" then
						Medkit.CFrame = Player.Character.HumanoidRootPart.CFrame
						wait(0.5)
					end
				end
			end
			wait(0.5)
		end
	end
})

--------------------------------------------------------------------------------------------------------------------------------------------------------------

local Script = require(Player.PlayerScripts.Shared.Client.CombatController)
local ScriptFunction = Script.BasicAttack
local ScriptFunction2 = Script.UseAbility

local AutoMobs = false

Tab1:AddToggle({
    Name = "Auto Farm",
    Default = false,
    Callback = function(value)
        AutoMobs = value
        if AutoMobs then
            local function PerformAttack()
                pcall(function()
                    if AutoMobs then
                        ScriptFunction(Script)
                        ScriptFunction2(Script)
                    end
                end)
            end
            
            game:GetService("RunService").Stepped:Connect(PerformAttack)
            
            while AutoMobs do
                    pcall(function()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartWaveDefense:FireServer()
                        ReplicatedStorage.Shared.Remotes.Data.ClaimPrizes:FireServer()

                        for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
                            if v:FindFirstChild("FinishRoom", true) and v:FindFirstChild("FinishRoom", true):FindFirstChild("Hitbox", true) then
                                firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart", true), v:FindFirstChild("FinishRoom", true):FindFirstChild("Hitbox", true):FindFirstChild("Part", true), 0)
                                firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart", true), v:FindFirstChild("FinishRoom", true):FindFirstChild("Hitbox", true):FindFirstChild("Part", true), 1)
                            end
                        end

                        for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
                            if v.Name == "Chest" then
                                firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart", true), v:FindFirstChild("Hitbox"), 0)
                                firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart", true), v:FindFirstChild("Hitbox"), 1)
                            end 
                        end

                    spawn(function()
                        while AutoMobs do
                            local player = game.Players.LocalPlayer
                            local destination = game.Workspace.Dungeon.Rooms.FinishRoom.Start.Position
                            local character = player.Character
                            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                            local currentPosition = humanoidRootPart.Position
                            if (currentPosition - destination).Magnitude > 100 then
                                humanoidRootPart.CFrame = CFrame.new(destination)
                            end
                            wait(1)
                        end
                    end)

                        spawn(function()
                            local alternativeParts = {} -- List to store names of unknown parts
                            local visitedPositions = {} -- List to store visited positions
                            local originalPosition -- Starting position

                            while AutoMobs do
                                for _, v in ipairs(game:GetService("Workspace"):GetChildren()) do
                                    if v.ClassName == "Folder" then
                                        for _, x in ipairs(v:GetChildren()) do
                                            if x.ClassName == "Folder" then
                                                for _, c in ipairs(x:GetChildren()) do
                                                    if c:IsA("Model") and c:FindFirstChild("EvilHumanoid") then
                                                        local EvilHumanoid = c:FindFirstChild("EvilHumanoid")
                                                        local monsterPos = c:FindFirstChild("HumanoidRootPart").Position

                                                        if EvilHumanoid.Health > 0 then
                                                            local ignoreParts = game:GetService("Workspace").Ignore:GetChildren()
                                                            for _, ignorePart in ipairs(ignoreParts) do
                                                                if ignorePart.Name ~= "Medkit" and (ignorePart:IsA("BasePart") or ignorePart:IsA("Model") or ignorePart:IsA("MeshPart") or ignorePart:IsA("Part")) then
                                                                    ignorePart.CFrame = CFrame.new(monsterPos)
                                                                end
                                                            end

                                                            
                                                            if not originalPosition then
                                                                originalPosition = monsterPos -- Store the starting position
                                                            end

                                                            -- Check if the position has been visited before
                                                            local visited = false
                                                            for _, visitedPos in ipairs(visitedPositions) do
                                                                if visitedPos == monsterPos then
                                                                    visited = true
                                                                    break
                                                                end
                                                            end

                                                            -- If the position has not been visited
                                                            if not visited then
                                                                -- Move to the new position
                                                                visitedPositions[#visitedPositions + 1] = monsterPos

                                                                -- Check if all visited positions have been covered
                                                                if #visitedPositions >= #alternativeParts then
                                                                    visitedPositions = {} -- Reset the visited positions list
                                                                    monsterPos = originalPosition -- Go back to the starting position
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                                wait(0.01)
                            end
                        end)
                    end)
                wait(0.01)
            end
        end
    end
})

--------------------------------------------------------------------------------------------------------------------------------------------------------------

local CollectMedkits = true
Tab2:AddToggle({
	Name = "Collect Medkit",
	Default = false,
	Callback = function(value)
		CollectMedkits = value
		while CollectMedkits do
			local humanoid = Player.Character:FindFirstChild("Humanoid")
			if humanoid and humanoid.Health < humanoid.MaxHealth * 0.95 then
				local Medkit = Workspace.Ignore:GetChildren() 
				for i, Medkit in ipairs(Medkit) do
					if Medkit:IsA("MeshPart") and Medkit.Name == "Medkit" then
						Medkit.CFrame = Player.Character.HumanoidRootPart.CFrame
						wait(0.5)
					end
				end
			end
			wait(0.5)
		end
	end
})

--------------------------------------------------------------------------------------------------------------------------------------------------------------

local function Wfall()
    for i, v in pairs(Workspace:GetChildren()) do
        if v.ClassName == "Folder" then
            for i, x in pairs(v:GetChildren()) do
                if x.ClassName == "Folder" then
                    for i, c in pairs(x:GetChildren()) do
                        if c.ClassName == "Model" and c:FindFirstChild("Invisible") then
                            local Fall = c
                            if Fall then
                                Fall:Destroy()
                            end
                        end
                    end
                end
            end
        end
    end
end


local function moveTo1(destination)
    local HumanoidRootPart = Player.Character:FindFirstChild("HumanoidRootPart")
    HumanoidRootPart.Anchored = true

    local distance = (destination.Position - HumanoidRootPart.Position).Magnitude
    local TweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(30, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = destination})
    tween:Play()
    tween.Completed:wait()
    HumanoidRootPart.Anchored = false
end


local function moveTo2(destination)-------------moveTo1
    local HumanoidRootPart = Player.Character:FindFirstChild("HumanoidRootPart")
        HumanoidRootPart.Anchored = true

    local distance = (destination.Position - HumanoidRootPart.Position).Magnitude
    local TweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(3, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = destination})
    tween:Play()
    tween.Completed:wait()
    HumanoidRootPart.Anchored = false
end


local air
local function createAir()

    local PPAT = Instance.new("Model")
    PPAT.Name = "PPAT"
    PPAT.Parent = workspace
    
    local air = Instance.new("Part")
    air.Size = Vector3.new(5000, 0.5, 5000)
    air.CFrame = CFrame.new(-1503, 2000, -2154)
    air.Transparency = 0
    air.Anchored = true
    air.Name = "Airwalk"
    air.Parent = PPAT
end

Tab2:AddToggle({
    Name = "Farm WAVE Beta",
    Default = false,
    Callback = function(value)
        AutoMobs = value

        if AutoMobs then
        Wfall()
        createAir()
        moveTo1(CFrame.new(-1503.674560546875, 2100.8099365234375, -2154.440673828125))-------------moveTo1
        wait(3)

        if AutoMobs then
            spawn(function()
                while AutoMobs do
                    moveTo1(CFrame.new(-1583.4991455078125, 2100.5, -2724.511474609375))-------------moveTo4
                    wait(0.2)
                    moveTo1(CFrame.new(-1654.963623046875, 2100.5, -2727.024169921875))-------------moveTo4
                    wait(0.2)
                end
                
            end)
            
            local function PerformAttack()
                pcall(function()
                    if AutoMobs then
                        ScriptFunction(Script)
                        ScriptFunction2(Script)
                    end
                end)
            end
            
            game:GetService("RunService").Stepped:Connect(PerformAttack)

            while AutoMobs do
                    pcall(function()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartWaveDefense:FireServer()
                        ReplicatedStorage.Shared.Remotes.Data.ClaimPrizes:FireServer()
                        
                        spawn(function()
                            local alternativeParts = {} -- List to store names of unknown parts
                            local visitedPositions = {} -- List to store visited positions
                            local originalPosition -- Starting position

                            while AutoMobs do
                                for _, v in ipairs(game:GetService("Workspace"):GetChildren()) do
                                    if v.ClassName == "Folder" then
                                        for _, x in ipairs(v:GetChildren()) do
                                            if x.ClassName == "Folder" then
                                                for _, c in ipairs(x:GetChildren()) do
                                                    if c:IsA("Model") and c:FindFirstChild("EvilHumanoid") then
                                                        local EvilHumanoid = c:FindFirstChild("EvilHumanoid")
                                                        local monsterPos = c:FindFirstChild("HumanoidRootPart").Position

                                                        if EvilHumanoid.Health > 0 then
                                                            local ignoreParts = game:GetService("Workspace").Ignore:GetChildren()
                                                            for _, ignorePart in ipairs(ignoreParts) do
                                                                if ignorePart.Name ~= "Medkit" and (ignorePart:IsA("BasePart") or ignorePart:IsA("Model") or ignorePart:IsA("MeshPart") or ignorePart:IsA("Part")) then
                                                                    ignorePart.CFrame = CFrame.new(monsterPos)
                                                                end
                                                            end

                  

                                                            if not originalPosition then
                                                                originalPosition = monsterPos -- Store the starting position
                                                            end

                                                            -- Check if the position has been visited before
                                                            local visited = false
                                                            for _, visitedPos in ipairs(visitedPositions) do
                                                                if visitedPos == monsterPos then
                                                                    visited = true
                                                                    break
                                                                end
                                                            end

                                                            -- If the position has not been visited
                                                            if not visited then
                                                                -- Move to the new position
                                                                visitedPositions[#visitedPositions + 1] = monsterPos

                                                                -- Check if all visited positions have been covered
                                                                if #visitedPositions >= #alternativeParts then
                                                                    visitedPositions = {} -- Reset the visited positions list
                                                                    monsterPos = originalPosition -- Go back to the starting position
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                                wait(0.01)
                            end
                        end)
                    end)
                    wait(0.01)
                end
            end
        end
    end
})

---------------------------------------------------------------------------------------------------------------------------------------------------------------

OrionLib:Init()
