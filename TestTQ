local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Treasure Quest", HidePremium = false, SaveConfig = false, ConfigFolder = "asdsahgjasdhkgjbdsa"})

-------------------------------------------------  Star Players  -------------------------------------------------
--------
------
-----
----
---
--
-------------------------------------------
local Tab1 = Window:MakeTab({
	Name = "Auto Farm",
	Icon = "rbxassetid://12836287616",
	PremiumOnly = false
})
-------------------------------------------
local Tab2 = Window:MakeTab({
	Name = "Farm WAVE",
	Icon = "rbxassetid://12836287616",
	PremiumOnly = false
})
-------------------------------------------
local Tab3 = Window:MakeTab({
	Name = "Auto Buy Item",
	Icon = "rbxassetid://12836287616",
	PremiumOnly = false
})
--------------------------------------------

repeat wait() until game:IsLoaded()
local ReplicatedStorage = game.ReplicatedStorage
local Players = game.Players
local TweenService = game.TweenService
local Workspace = game.Workspace
local HttpService = game.HttpService
local Player = Players.LocalPlayer

local TweenInfoClose = TweenInfo.new(0.5, Enum.EasingStyle.Linear)
local Character = Player.Character

local HumanoidRootPart = Character.HumanoidRootPart

local Speed = 60

Tab1:AddButton({
	Name = "Speed",
	Callback = function(value)
		if Speed then
			Player.Character.Humanoid.WalkSpeed = Speed
		end
	end
})

local InfJump = false
Tab1:AddToggle({
	Name = "InfJump",
	Default = false,
	Callback = function(value)
		InfJump = value
	end
})

local function onJumpRequest()
	if InfJump then
		Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
	end
end

game:GetService("UserInputService").JumpRequest:Connect(onJumpRequest)

local AntiAFK = false
Tab1:AddToggle({
	Name = "Anti AFK",
	Default = false,
	Callback = function(value)
		AntiAFK = value
		if AntiAFK then
			wait(3)
			local VirtualUser = game:service('VirtualUser')
			game:service('Players').LocalPlayer.Idled:Connect(function()
				VirtualUser:CaptureController()
				VirtualUser:ClickButton2(Vector2.new())
			end)
		end
	end
})

--------------------------------------------------------------------------------------------------------------------------------------------------------------

local Section = Tab1:AddSection({
	Name = "----------------------------------------------------------------------------------------------------------------------------------------------"
})

local CollectMedkits = true
Tab1:AddToggle({
	Name = "Collect Medkit",
	Default = false,
	Callback = function(value)
		CollectMedkits = value
		while CollectMedkits do
			local humanoid = Player.Character:FindFirstChild("Humanoid")
			if humanoid and humanoid.Health < humanoid.MaxHealth * 0.95 then
				local Medkit = Workspace.Ignore:GetChildren() 
				for i, Medkit in ipairs(Medkit) do
					if Medkit:IsA("MeshPart") and Medkit.Name == "Medkit" then
						Medkit.CFrame = Player.Character.HumanoidRootPart.CFrame
						wait(0.5)
					end
				end
			end
			wait(0.5)
		end
	end
})

------------------------------------------------------------------------------------------------------------

local function findStartPartInWorkspace(workspace)
    local function searchInChildren(parent)
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Model") and child.Name == "Start" then
                local finishPart = child:FindFirstChild("Spawn")
                local HitboxPart = finishPart and finishPart:FindFirstChildWhichIsA("BasePart")
                if HitboxPart then
                    return HitboxPart
                end
            end

            local foundPart = searchInChildren(child)
            if foundPart then
                return foundPart
            end
        end

        return nil
    end

    return searchInChildren(workspace)
end

-----------------------------------------------------------------------------------------------------------------------------------------------------

local visitedChests = {}
local lastVisitedChest = nil

local function findNewChestInWorkspace(parent)
    for _, child in pairs(parent:GetChildren()) do
        if child:IsA("Folder") and child.Name == "Chests" then
            for _, grandchild in pairs(child:GetChildren()) do
                if grandchild:IsA("Model") and grandchild.Name == "Chest" then
                    local ChestPart = grandchild:FindFirstChild("Hitbox")
                    if ChestPart and not visitedChests[grandchild] then
                        visitedChests[grandchild] = true
                        lastVisitedChest = grandchild
                        return ChestPart
                    end
                end
            end
        end

        local foundPart = findNewChestInWorkspace(child)
        if foundPart then
            return foundPart
        end
    end

    return nil
end

-----------------------------------------------------------------------------------------------------------------------------------------------------

local TweenService = game:GetService("TweenService")

local function findFinishPartInWorkspace(workspace)
    local function searchInChildren(parent)
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Model") and child.Name == "FinishRoom" then
                local finishPart = child:FindFirstChild("Hitbox")
                local HitboxPart = finishPart and finishPart:FindFirstChildWhichIsA("BasePart")
                if HitboxPart then
                    return HitboxPart
                end
            end

            local foundPart = searchInChildren(child)
            if foundPart then
                return foundPart
            end
        end

        return nil
    end

    return searchInChildren(workspace)
end

---------------------------------------------------------------------------------------------------------------------------------

local Script = require(Player.PlayerScripts.Shared.Client.CombatController)
local ScriptFunction = Script.BasicAttack
local ScriptFunction2 = Script.UseAbility

local AutoMobs = false

Tab1:AddToggle({
    Name = "Auto Farm and TP Chest",
    Default = false,
    Callback = function(value)
        AutoMobs = value
        if AutoMobs then
            local function PerformAttack()
                pcall(function()
                    if AutoMobs then
                        ScriptFunction(Script)
                        ScriptFunction2(Script)
                    end
                end)
            end
            game:GetService("RunService").Stepped:Connect(PerformAttack)

            local StartPart = findStartPartInWorkspace(game:GetService("Workspace"))
                if StartPart then
                    local character = game.Players.LocalPlayer.Character
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        humanoidRootPart.CFrame = StartPart.CFrame
                    end
                end
            wait(0.1)
            
            while AutoMobs do
                    pcall(function()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartWaveDefense:FireServer()
                        ReplicatedStorage.Shared.Remotes.Data.ClaimPrizes:FireServer()

                            spawn(function()
                                while AutoMobs do
                                    local finishPart = findFinishPartInWorkspace(game:GetService("Workspace"))
                                    if finishPart then
                                        local character = game.Players.LocalPlayer.Character
                                        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                                        if humanoidRootPart then
                                            local ChestPart = findNewChestInWorkspace(game:GetService("Workspace"))
                                            if ChestPart then
                                                humanoidRootPart.CFrame = ChestPart.CFrame
                                                wait(2)
                                                humanoidRootPart.CFrame = finishPart.CFrame
                                            end
                                        end
                                    end
                                    wait(1)
                                end
                            end)

                            spawn(function()
                            local alternativeParts = {} -- List to store names of unknown parts
                            local visitedPositions = {} -- List to store visited positions
                            local originalPosition -- Starting position

                            while AutoMobs do
                                for _, v in ipairs(game:GetService("Workspace"):GetChildren()) do
                                    if v.ClassName == "Folder" then
                                        for _, x in ipairs(v:GetChildren()) do
                                            if x.ClassName == "Folder" then
                                                for _, c in ipairs(x:GetChildren()) do
                                                    if c:IsA("Model") and c:FindFirstChild("EvilHumanoid") then
                                                        local EvilHumanoid = c:FindFirstChild("EvilHumanoid")
                                                        local monsterPos = c:FindFirstChild("HumanoidRootPart").Position

                                                        if EvilHumanoid.Health > 0 then
                                                            local ignoreParts = game:GetService("Workspace").Ignore:GetChildren()

                                                            local Skill = {"Tsunami","Freeze","Sandstorm","IceSpike","MeteorBlast","WaveBlast",
                                                                            "InfernoWave","Spike"}
                                                            for _, ignorePart in ipairs(ignoreParts) do
                                                                if ignorePart.Name ~= "Medkit" or table.find(Skill, ignorePart.Name) and (ignorePart:IsA("BasePart") 
                                                                or ignorePart:IsA("Model") or ignorePart:IsA("MeshPart") 
                                                                or ignorePart:IsA("Part")) then

                                                                    if table.find(Skill, ignorePart.Name) then
                                                                        ignorePart.Size = Vector3.new(100, 100, 100)
                                                                    end
                                                                    if table.find(Skill, ignorePart.Name) then
                                                                        ignorePart.Transparency = 1
                                                                        ignorePart.CFrame = CFrame.new(monsterPos)
                                                                    end
                                                                end
                                                            end


                                                            if not originalPosition then
                                                                originalPosition = monsterPos -- Store the starting position
                                                            end

                                                            -- Check if the position has been visited before
                                                            local visited = false
                                                            for _, visitedPos in ipairs(visitedPositions) do
                                                                if visitedPos == monsterPos then
                                                                    visited = true
                                                                    break
                                                                end
                                                            end

                                                            -- If the position has not been visited
                                                            if not visited then
                                                                -- Move to the new position
                                                                visitedPositions[#visitedPositions + 1] = monsterPos

                                                                -- Check if all visited positions have been covered
                                                                if #visitedPositions >= #alternativeParts then
                                                                    visitedPositions = {} -- Reset the visited positions list
                                                                    monsterPos = originalPosition -- Go back to the starting position
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                                wait(0.01)
                            end
                        end)
                    end)
                wait(0.01)
            end
        end
    end
})

Tab1:AddToggle({
    Name = "Auto Farm and Don't TP Chest",
    Default = false,
    Callback = function(value)
        AutoMobs = value
        if AutoMobs then
            local function PerformAttack()
                pcall(function()
                    if AutoMobs then
                        ScriptFunction(Script)
                        ScriptFunction2(Script)
                    end
                end)
            end
            
            game:GetService("RunService").Stepped:Connect(PerformAttack)
            
            local StartPart = findStartPartInWorkspace(game:GetService("Workspace"))
                if StartPart then
                    local character = game.Players.LocalPlayer.Character
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        humanoidRootPart.CFrame = StartPart.CFrame
                    end
                end
            wait(0.1)

            while AutoMobs do
                    pcall(function()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartWaveDefense:FireServer()
                        ReplicatedStorage.Shared.Remotes.Data.ClaimPrizes:FireServer()

                            spawn(function()
                                while AutoMobs do
                                    local finishPart = findFinishPartInWorkspace(game:GetService("Workspace"))
                                    if finishPart then
                                        local character = game.Players.LocalPlayer.Character
                                        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                                        if humanoidRootPart then
                                            humanoidRootPart.CFrame = finishPart.CFrame
                                        end
                                    end
                                    wait(2)
                                end
                            end)  

                        spawn(function()
                            local alternativeParts = {} -- List to store names of unknown parts
                            local visitedPositions = {} -- List to store visited positions
                            local originalPosition -- Starting position

                            while AutoMobs do
                                for _, v in ipairs(game:GetService("Workspace"):GetChildren()) do
                                    if v.ClassName == "Folder" then
                                        for _, x in ipairs(v:GetChildren()) do
                                            if x.ClassName == "Folder" then
                                                for _, c in ipairs(x:GetChildren()) do
                                                    if c:IsA("Model") and c:FindFirstChild("EvilHumanoid") then
                                                        local EvilHumanoid = c:FindFirstChild("EvilHumanoid")
                                                        local monsterPos = c:FindFirstChild("HumanoidRootPart").Position

                                                        if EvilHumanoid.Health > 0 then
                                                            local ignoreParts = game:GetService("Workspace").Ignore:GetChildren()

                                                            local Skill = {"Tsunami","Freeze","Sandstorm","IceSpike","MeteorBlast","WaveBlast",
                                                                            "InfernoWave","Spike"}
                                                            for _, ignorePart in ipairs(ignoreParts) do
                                                                if ignorePart.Name ~= "Medkit" or table.find(Skill, ignorePart.Name) and (ignorePart:IsA("BasePart") 
                                                                or ignorePart:IsA("Model") or ignorePart:IsA("MeshPart") 
                                                                or ignorePart:IsA("Part")) then

                                                                    if table.find(Skill, ignorePart.Name) then
                                                                        ignorePart.Size = Vector3.new(100, 100, 100)
                                                                    end
                                                                    if table.find(Skill, ignorePart.Name) then
                                                                        ignorePart.Transparency = 1 
                                                                        ignorePart.CFrame = CFrame.new(monsterPos)
                                                                    end
                                                                end
                                                            end

                                                            
                                                            if not originalPosition then
                                                                originalPosition = monsterPos -- Store the starting position
                                                            end

                                                            -- Check if the position has been visited before
                                                            local visited = false
                                                            for _, visitedPos in ipairs(visitedPositions) do
                                                                if visitedPos == monsterPos then
                                                                    visited = true
                                                                    break
                                                                end
                                                            end

                                                            -- If the position has not been visited
                                                            if not visited then
                                                                -- Move to the new position
                                                                visitedPositions[#visitedPositions + 1] = monsterPos

                                                                -- Check if all visited positions have been covered
                                                                if #visitedPositions >= #alternativeParts then
                                                                    visitedPositions = {} -- Reset the visited positions list
                                                                    monsterPos = originalPosition -- Go back to the starting position
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                                wait(0.01)
                            end
                        end)
                    end)
                wait(0.01)
            end
        end
    end
})

--------------------------------------------------------------------------------------------------------------------------------------------------------------

local CollectMedkits = true
Tab2:AddToggle({
	Name = "Collect Medkit",
	Default = false,
	Callback = function(value)
		CollectMedkits = value
		while CollectMedkits do
			local humanoid = Player.Character:FindFirstChild("Humanoid")
			if humanoid and humanoid.Health < humanoid.MaxHealth * 0.95 then
				local Medkit = Workspace.Ignore:GetChildren() 
				for i, Medkit in ipairs(Medkit) do
					if Medkit:IsA("MeshPart") and Medkit.Name == "Medkit" then
						Medkit.CFrame = Player.Character.HumanoidRootPart.CFrame
						wait(0.5)
					end
				end
			end
			wait(0.5)
		end
	end
})

--------------------------------------------------------------------------------------------------------------------------------------------------------------

Tab1:AddToggle({
    Name = "Farm WAVE",
    Default = false,
    Callback = function(value)
        AutoMobs = value
        if AutoMobs then
            local function PerformAttack()
                pcall(function()
                    if AutoMobs then
                        ScriptFunction(Script)
                        ScriptFunction2(Script)
                    end
                end)
            end
            
            game:GetService("RunService").Stepped:Connect(PerformAttack)
            
            while AutoMobs do
                    pcall(function()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                        ReplicatedStorage.Dungeon.Remotes.StartWaveDefense:FireServer()
                        ReplicatedStorage.Shared.Remotes.Data.ClaimPrizes:FireServer()

                        spawn(function()
                            local alternativeParts = {} -- List to store names of unknown parts
                            local visitedPositions = {} -- List to store visited positions
                            local originalPosition -- Starting position

                            while AutoMobs do
                                for _, v in ipairs(game:GetService("Workspace"):GetChildren()) do
                                    if v.ClassName == "Folder" then
                                        for _, x in ipairs(v:GetChildren()) do
                                            if x.ClassName == "Folder" then
                                                for _, c in ipairs(x:GetChildren()) do
                                                    if c:IsA("Model") and c:FindFirstChild("EvilHumanoid") then
                                                        local EvilHumanoid = c:FindFirstChild("EvilHumanoid")
                                                        local monsterPos = c:FindFirstChild("HumanoidRootPart").Position

                                                        if EvilHumanoid.Health > 0 then
                                                            local ignoreParts = game:GetService("Workspace").Ignore:GetChildren()

                                                            local Skill = {"Tsunami","Freeze","Sandstorm","IceSpike","MeteorBlast","WaveBlast",
                                                                            "InfernoWave","Spike"}
                                                            for _, ignorePart in ipairs(ignoreParts) do
                                                                if ignorePart.Name ~= "Medkit" or table.find(Skill, ignorePart.Name) and (ignorePart:IsA("BasePart") 
                                                                or ignorePart:IsA("Model") or ignorePart:IsA("MeshPart") 
                                                                or ignorePart:IsA("Part")) then

                                                                    if table.find(Skill, ignorePart.Name) then
                                                                        ignorePart.Size = Vector3.new(100, 100, 100)
                                                                    end
                                                                    if table.find(Skill, ignorePart.Name) then
                                                                        ignorePart.Transparency = 1
                                                                        ignorePart.CFrame = CFrame.new(monsterPos)
                                                                    end
                                                                end
                                                            end

                                                            
                                                            if not originalPosition then
                                                                originalPosition = monsterPos -- Store the starting position
                                                            end

                                                            -- Check if the position has been visited before
                                                            local visited = false
                                                            for _, visitedPos in ipairs(visitedPositions) do
                                                                if visitedPos == monsterPos then
                                                                    visited = true
                                                                    break
                                                                end
                                                            end

                                                            -- If the position has not been visited
                                                            if not visited then
                                                                -- Move to the new position
                                                                visitedPositions[#visitedPositions + 1] = monsterPos

                                                                -- Check if all visited positions have been covered
                                                                if #visitedPositions >= #alternativeParts then
                                                                    visitedPositions = {} -- Reset the visited positions list
                                                                    monsterPos = originalPosition -- Go back to the starting position
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                                wait(0.01)
                            end
                        end)
                    end)
                wait(0.01)
            end
        end
    end
})

---------------------------------------------------------------------------------------------------------------------------------------------------------------

local Buyitem = false

local shopData = {
    ["Aquatic Chests"] = {
        [1] = "AquaticArsenal",
        [2] = "0",
        [3] = 1
    },
    ["Bubble Effect"] = {
        [1] = "AquaticArsenal",
        [2] = "1",
        [3] = 1
    },
    ["Speed Position"] = {
        [1] = "AquaticArsenal",
        [2] = "2",
        [3] = 1
    },
    ["Ability Position"] = {
        [1] = "AquaticArsenal",
        [2] = "3",
        [3] = 1
    }
}

local selectedShop = "Aquatic Chests"
local selectedAmount = 1
local remainingRounds = 1

local function PurchaseItem()
    if Buyitem and remainingRounds > 0 then
        local AquaticArsenal = nil
        while remainingRounds > 0 and not AquaticArsenal do
            AquaticArsenal = game:GetService("Workspace").Dungeon.Rooms.BossRoom.SecretShops.AquaticArsenal
            if not AquaticArsenal then
                wait(0.1)
            end
        end
        if AquaticArsenal then
            local args = shopData[selectedShop]
            args[3] = selectedAmount
            game:GetService("ReplicatedStorage").Lobby.Remotes.ShopPurchase:FireServer(unpack(args))
            wait(0.1)
            game:GetService("ReplicatedStorage").Shared.Remotes.Data.ClaimPrizes:FireServer()
            remainingRounds = remainingRounds - 1
        end
    end
end

Tab3:AddDropdown({
    Name = "Aquatic Shop",
    Default = selectedShop,
    Options = {"Aquatic Chests", "Bubble Effect", "Ability Position", "Speed Position"},
    Callback = function(value)
        selectedShop = value
    end
})

Tab3:AddDropdown({
    Name = "Amount",
    Default = tostring(selectedAmount),
    Options = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
    Callback = function(value)
        selectedAmount = tonumber(value) or 1
    end
})

Tab3:AddDropdown({
    Name = "Buy Round",
    Default = "1",
    Options = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
    Callback = function(value)
        remainingRounds = tonumber(value) or 1
    end
})

Tab3:AddToggle({
    Name = "Buy Item",
    Default = false,
    Callback = function(value)
        Buyitem = value
        PurchaseItem()
    end
})

OrionLib:Init()
